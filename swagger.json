{
  "swagger": "2.0",
  "info": {
    "description": " Payment Management API can be used to perform or retrieve performed payments via any payment method.\n\n It consists of Payment resource and it's sub-resources.\n The API can be used to:\n\n * Retrieve a list of payments filtered by a given criteria\n * Retrieve a single performed payment\n * Create a payment\n * Perform a backend calculation of required payment to close items supplied in the request ",
    "version": "1.7.1",
    "title": "Payment Management API",
    "contact": {
      "name": "HAL Team",
      "email": "HAL.Team@t.ht.hr"
    },
    "license": {
      "name": "Proprietary license"
    }
  },
  "host": "localhost:8008",
  "basePath": "/paymentManagement/v1",
  "tags": [
    {
      "name": "Payments",
      "description": "The Payment Management API"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "accessToken": []
    }
  ],
  "paths": {
    "/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a list of payments",
        "operationId": "retrievePayments",
        "consumes": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "To retrieve the payments from a specific account",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "To retrieve the payments from a specific customer",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "To retrieve the payments performed before this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "list of fields returned in response",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page, positive integer, starts with 0",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentMethod.type",
            "in": "query",
            "description": "To retrieve the payments performed with a specific method",
            "required": false,
            "type": "string",
            "enum": [
              "bankAccountTransfer",
              "bankCard",
              "account"
            ]
          },
          {
            "name": "query",
            "in": "query",
            "description": "RQL command",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "page size, positive integer greater than 0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "data sort parameter, starts with '+' or '-' prefix; when prefix empty, '+' is default; multiple attributes can be used separated by ','",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "To retrieve the payments performed after this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Payments retrieved successfully",
            "headers": {
              "X-Content-Range": {
                "type": "string",
                "description": "returns paging info in format {page}/{limit}/{results}|*"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentType"
              }
            }
          },
          "206": {
            "description": "Partial content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "207": {
            "description": "Warning or info",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad format request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "408": {
            "description": "Request timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Business rules exceptions",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Business input parameter validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Backend not available",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create a new payment",
        "operationId": "createPayment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentType"
            }
          },
          "201": {
            "description": "Payment created successfully",
            "schema": {
              "$ref": "#/definitions/PaymentType"
            }
          },
          "206": {
            "description": "Partial content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "207": {
            "description": "Warning or info",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad format request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "408": {
            "description": "Request timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Business rules exceptions",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Business input parameter validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Backend not available",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "deprecated": false
      }
    },
    "/payments/calculate": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Backend calculation of payment amounts",
        "operationId": "calculatePayment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentType"
            }
          },
          "206": {
            "description": "Partial content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "207": {
            "description": "Warning or info",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad format request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "408": {
            "description": "Request timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Business rules exceptions",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Business input parameter validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Backend not available",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "deprecated": false
      }
    },
    "/payments/{paymentId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a payment",
        "operationId": "retrievePayment",
        "consumes": [],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "list of fields returned in response",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of the payment that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment retrieved successfully",
            "schema": {
              "$ref": "#/definitions/PaymentType"
            }
          },
          "206": {
            "description": "Partial content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "207": {
            "description": "Warning or info",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad format request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "408": {
            "description": "Request timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Business rules exceptions",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Business input parameter validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Backend not available",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "accessToken": []
          }
        ],
        "deprecated": false
      }
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "description": "Access token in JWT or opaque format sent in HTTP Authorization header, Bearer schema",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "AccountRefType": {
      "title": "AccountRefType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the entity"
            },
            "href": {
              "type": "string",
              "description": "URI where to query or perform actions on the entity"
            },
            "name": {
              "type": "string",
              "description": "Screen name of the entity"
            },
            "description": {
              "type": "string",
              "description": "Description of the entity"
            }
          },
          "title": "AccountRefType",
          "description": "Reference to an external entity that can be tipically queried with another API such as a customer account, a ticket, etc."
        }
      ],
      "description": "Reference to an external entity that can be tipically queried with another API such as a customer account, a ticket, etc."
    },
    "BankAccountDebitType": {
      "title": "BankAccountDebitType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "accountNumber": {
              "type": "string",
              "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
            },
            "accountNumberType": {
              "type": "string",
              "description": "Type of account number (e.g.: IBAN, SWIFT, ...)",
              "enum": [
                "IBAN",
                "SWIFT",
                "BBAN"
              ]
            },
            "bic": {
              "type": "string",
              "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
            },
            "owner": {
              "type": "string",
              "description": "Owner of the bank account"
            },
            "bank": {
              "type": "string",
              "description": "Screen name of the bank"
            }
          },
          "title": "BankAccountDebitType",
          "description": "Details of a bank account"
        }
      ],
      "description": "Details of a bank account"
    },
    "BankAccountTransferType": {
      "title": "BankAccountTransferType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "accountNumber": {
              "type": "string",
              "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
            },
            "accountNumberType": {
              "type": "string",
              "description": "Type of account number (e.g.: IBAN, SWIFT, ...)",
              "enum": [
                "IBAN",
                "SWIFT",
                "BBAN"
              ]
            },
            "BIC": {
              "type": "string",
              "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
            },
            "owner": {
              "type": "string",
              "description": "Owner of the bank account"
            },
            "bank": {
              "type": "string",
              "description": "Screen name of the bank"
            }
          },
          "title": "BankAccountTransferType",
          "description": "Details of a bank account"
        }
      ],
      "description": "Details of a bank account"
    },
    "BankCardType": {
      "title": "BankCardType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "brand": {
              "type": "string",
              "description": "Credit card brand. E.g.: Visa, MasterCard, AmericanExpress...",
              "enum": [
                "MasterCard",
                "Visa",
                "Maestro"
              ]
            },
            "type": {
              "type": "string",
              "description": "Debit or credit",
              "enum": [
                "debit",
                "credit"
              ]
            },
            "cardNumber": {
              "type": "string",
              "description": "Credit card number"
            },
            "expirationDate": {
              "type": "string",
              "description": "the card's expiration date"
            },
            "cvv": {
              "type": "string",
              "description": "the CVV or CVV2 code of the card"
            },
            "lastFourDigits": {
              "type": "string",
              "description": "Last four digits of the card"
            },
            "nameOnCard": {
              "type": "string",
              "description": "Name writen on the card"
            },
            "bank": {
              "type": "string",
              "description": "Bank that issued the card"
            },
            "countryOfIssuance": {
              "type": "string",
              "description": "Country of issuance"
            }
          },
          "title": "BankCardType",
          "description": "Details of a bank card"
        }
      ],
      "description": "Details of a bank card"
    },
    "CashType": {
      "title": "CashType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "cashierInfo": {
              "type": "string",
              "description": "Information about who performed the payment"
            }
          },
          "title": "CashType",
          "description": "Details of cash payer"
        }
      ],
      "description": "Details of cash payer"
    },
    "ChannelRefType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the channel"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the channel"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the channel"
        },
        "description": {
          "type": "string",
          "description": "Description of the channel"
        }
      },
      "title": "ChannelRefType",
      "description": "Reference to a channel that can be queried with an API call."
    },
    "Condition": {
      "type": "object",
      "required": [
        "attribute",
        "operator",
        "value"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the condition"
        },
        "attribute": {
          "type": "string",
          "description": "Attribute to evaluate"
        },
        "operator": {
          "type": "string",
          "description": "Comparison operator to be used in the evaluation"
        },
        "isFulfilled": {
          "type": "boolean",
          "description": "Is condition fulfilled"
        },
        "value": {
          "type": "string",
          "description": "The value of the attribute to be evaluated"
        }
      },
      "title": "Condition",
      "description": "A Condition specifies the condition that is evaluated to decide if payment method is fulfilled."
    },
    "Details": {
      "type": "object",
      "title": "Details",
      "description": "Details of the payment method. This object's type depends on the value of the type"
    },
    "DigitalWalletType": {
      "title": "DigitalWalletType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "service": {
              "type": "string",
              "description": "Wallet service (e.g.: PayPal)"
            },
            "walletId": {
              "type": "string",
              "description": "Unique Id of the account in the service"
            },
            "walletUrl": {
              "type": "string",
              "description": "URI pointing at the digital wallet (e.g.: https://paypal.me/johndoe)"
            }
          },
          "title": "DigitalWalletType",
          "description": "Details of a digital wallet"
        }
      ],
      "description": "Details of a digital wallet"
    },
    "EntityRefType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the entity"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the entity"
        },
        "type": {
          "type": "string",
          "description": "Type of entity (e.g.: account, customer, ticket, etc.)",
          "enum": [
            "bill",
            "account",
            "msisdn",
            "barcode"
          ]
        },
        "name": {
          "type": "string",
          "description": "Screen name of the entity"
        },
        "description": {
          "type": "string",
          "description": "Description of the entity"
        }
      },
      "title": "EntityRefType",
      "description": "Reference to an external entity that can be tipically queried with another API such as a customer account, a ticket, etc."
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "id",
        "timestamp"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique error ID, used for logging purposes, UUID format"
        },
        "code": {
          "type": "string",
          "description": "A string coding the error type. This is given to caller so he can translate them if required."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Exact time of error"
        },
        "message": {
          "type": "string",
          "description": "A short localized string that describes the error."
        },
        "retryable": {
          "type": "boolean",
          "description": "A boolean that provides info is request retryable"
        },
        "severity": {
          "type": "string",
          "description": "Describes severity of error. Order from most to least critical is: FATAL, ERROR, WARN, INFO, DEBUG, TRACE\n* `FATAL` Designates very severe error events that will presumably lead the application to abort.  \n* `ERROR` Designates error events that might still allow the application to continue running.  \n* `WARN` Designates potentially harmful situations.  \n* `INFO` Designates informational messages that highlight the progress of the application at coarse-grained level.  \n* `DEBUG` Designates fine-grained informational events that are most useful to debug an application.  \n* `TRACE` Designates finer-grained informational events than the DEBUG. ",
          "enum": [
            "FATAL",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE"
          ]
        },
        "details": {
          "type": "array",
          "description": "Exception detailed info",
          "items": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "title": "Error",
      "description": "Default error message template"
    },
    "JuvoLoanType": {
      "title": "JuvoLoanType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of a loan."
            },
            "points": {
              "type": "integer",
              "format": "int32",
              "description": "Number of points given for returning loan on time"
            },
            "loan": {
              "description": "Loan amount",
              "$ref": "#/definitions/Money"
            },
            "serviceFee": {
              "description": "Service fee",
              "$ref": "#/definitions/Money"
            },
            "isFulfilled": {
              "type": "boolean",
              "description": "Is user eligible to receive loan"
            },
            "unfulfillmentReason": {
              "type": "string",
              "description": "Is user eligible to receive loan"
            },
            "conditions": {
              "type": "array",
              "description": "Conditions which must be satisfied to receive loan",
              "items": {
                "$ref": "#/definitions/Condition"
              }
            }
          },
          "title": "JuvoLoanType",
          "description": "Details of a Juvo loan."
        }
      ],
      "description": "Details of a Juvo loan."
    },
    "Money": {
      "type": "object",
      "properties": {
        "units": {
          "type": "string",
          "description": "Currency code (ISO4217 norm uses 3 letters to define the currency)"
        },
        "amount": {
          "type": "number",
          "description": "Amount of money"
        }
      },
      "title": "Money",
      "description": "Money"
    },
    "MoneyType": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Amount of money"
        },
        "units": {
          "type": "string",
          "description": "Currency"
        }
      },
      "title": "MoneyType",
      "description": "Representation of a monetary value"
    },
    "PayByLinkType": {
      "title": "PayByLinkType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "sessionId": {
              "type": "string"
            },
            "merchantId": {
              "type": "string"
            },
            "crc": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "client": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "zip": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "language": {
              "type": "string"
            }
          },
          "title": "PayByLinkType",
          "description": "Pay by link"
        }
      ],
      "description": "Pay by link"
    },
    "PaymentItemType": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/MoneyType"
        },
        "taxAmount": {
          "$ref": "#/definitions/MoneyType"
        },
        "totalAmount": {
          "$ref": "#/definitions/MoneyType"
        },
        "item": {
          "$ref": "#/definitions/EntityRefType"
        }
      },
      "title": "PaymentItemType"
    },
    "PaymentMethodType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the payment method in the server"
        },
        "href": {
          "type": "string",
          "description": "URI where to perform actions on the payment method"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the payment method"
        },
        "description": {
          "type": "string",
          "description": "Description of the payment method"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriodType"
        },
        "preferred": {
          "type": "boolean",
          "description": "Defines whether this particular method is the preferred one"
        },
        "relatedParty": {
          "type": "array",
          "description": "Account that owns the payment method",
          "items": {
            "$ref": "#/definitions/RelatedPartyRefType"
          }
        },
        "relatedProduct": {
          "description": "Product related to payment method",
          "$ref": "#/definitions/ProductRef"
        },
        "type": {
          "type": "string",
          "description": "Payment method type. The content of the details field depends on the value of this one",
          "enum": [
            "mobileAccount",
            "fixedAccount",
            "bankAccountTransfer",
            "bankAccountDebit",
            "bankCard",
            "cash",
            "digitalWallet",
            "payByLink",
            "tokenizedCard",
            "voucher",
            "postpaid",
            "juvoLoanType"
          ]
        },
        "authorizationCode": {
          "type": "string",
          "description": "Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own."
        },
        "oneTimeUseReference": {
          "type": "string",
          "description": "One-time-use reference to payment information"
        },
        "status": {
          "type": "string",
          "description": "Current status of the payment method",
          "enum": [
            "active",
            "inactive",
            "limitReached",
            "expired",
            "ineligible"
          ]
        },
        "statusDate": {
          "type": "string",
          "format": "date-time",
          "description": "Last time the status changed"
        },
        "details": {
          "description": "Details of the payment method. This object's type depends on the value of the type field above",
          "$ref": "#/definitions/Details"
        }
      },
      "title": "PaymentMethodType",
      "description": "Representation of a payment method"
    },
    "PaymentType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "correlatorId": {
          "type": "string"
        },
        "paymentDate": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "authorizationCode": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/MoneyType"
        },
        "taxAmount": {
          "$ref": "#/definitions/MoneyType"
        },
        "totalAmount": {
          "$ref": "#/definitions/MoneyType"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRefType"
        },
        "account": {
          "$ref": "#/definitions/AccountRefType"
        },
        "paymentItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentItemType"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethodType"
          }
        },
        "storePaymentMethod": {
          "type": "boolean",
          "description": "Determines whether the payment method associated with the successful transaction should be stored"
        },
        "transactionSummaryInfo": {
          "$ref": "#/definitions/TransactionSummaryInfoType"
        },
        "status": {
          "type": "string",
          "enum": [
            "confirmed",
            "canceled",
            "inProgress",
            "failed"
          ]
        },
        "statusDate": {
          "type": "string",
          "format": "date-time"
        },
        "payer": {
          "$ref": "#/definitions/RelatedPartyRefType"
        },
        "transactionId": {
          "type": "string"
        }
      },
      "title": "PaymentType"
    },
    "PostpaidType": {
      "title": "PostpaidType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Postpaid id"
            },
            "href": {
              "type": "string",
              "description": "Postpaid href"
            },
            "name": {
              "type": "string",
              "description": "Postpaid name"
            },
            "description": {
              "type": "string",
              "description": "Postpaid description"
            }
          },
          "title": "PostpaidType",
          "description": "Representation of a postpaid"
        }
      ],
      "description": "Representation of a postpaid"
    },
    "ProductRef": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the related product"
        },
        "href": {
          "type": "string",
          "description": "Reference to the product"
        },
        "name": {
          "type": "string",
          "description": "Name of the product"
        }
      },
      "title": "ProductRef",
      "description": "Information about an associated entity and its role"
    },
    "QuantityType": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Measured amount"
        },
        "maximum": {
          "type": "number",
          "description": "Maximum amount allowed"
        },
        "minimum": {
          "type": "number",
          "description": "Minimum amount allowed"
        },
        "units": {
          "type": "string",
          "description": "Units the quantity is measured in"
        }
      },
      "title": "QuantityType",
      "description": "Representation of a quantity of something. I can also be used to represent a quantity range"
    },
    "RelatedPartyRefType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the related party"
        },
        "href": {
          "type": "string",
          "description": "Reference to the party"
        },
        "type": {
          "type": "string",
          "description": "Type of party (e.g.: account, customer, user...)"
        },
        "name": {
          "type": "string",
          "description": "Name of the party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related entity\n * `OWNER` Owner role"
        }
      },
      "title": "RelatedPartyRefType",
      "description": "Information about an associated entity and its role"
    },
    "TimePeriodType": {
      "type": "object",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of the period"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End date of the period"
        }
      },
      "title": "TimePeriodType",
      "description": "Representation of a time period"
    },
    "TokenizedCardType": {
      "title": "TokenizedCardType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "brand": {
              "type": "string",
              "description": "Card brand. Might be used for display purposes",
              "enum": [
                "MasterCard",
                "Visa",
                "Maestro"
              ]
            },
            "type": {
              "type": "string",
              "description": "Card type. Might be used for display purposes",
              "enum": [
                "debit",
                "credit"
              ]
            },
            "lastFourDigits": {
              "type": "string",
              "description": "Last four digits of the credit card. Might be used for display purposes"
            },
            "cvv": {
              "type": "string",
              "description": "security code (e.g.:cvv, cvv2) of the card. Even when the card is tokenized, in some countries it is still necessary to send the cvv to perform payments."
            },
            "tokenType": {
              "type": "string",
              "description": "Token type (e.g.: paymentToken)",
              "enum": [
                "paymentToken"
              ]
            },
            "token": {
              "type": "string",
              "description": "The token itself"
            },
            "issuer": {
              "type": "string",
              "description": "Whoever issued the token"
            },
            "nameOnCard": {
              "type": "string",
              "description": "Name writen on the card"
            },
            "bank": {
              "type": "string",
              "description": "Bank that issued the card"
            },
            "countryOfIssuance": {
              "type": "string",
              "description": "Country of issuance"
            },
            "expirationDate": {
              "type": "string",
              "description": "the card's expiration date"
            }
          },
          "title": "TokenizedCardType",
          "description": "Representation of a tokenized card"
        }
      ],
      "description": "Representation of a tokenized card"
    },
    "TransactionSummaryInfoType": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "E-mail to send the transaction summary"
        }
      },
      "title": "TransactionSummaryInfoType",
      "description": "Transaction summary information"
    },
    "VoucherType": {
      "title": "VoucherType",
      "allOf": [
        {
          "$ref": "#/definitions/Details"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Code that identifies the voucher or provides the discount"
            },
            "description": {
              "type": "string",
              "description": "Description of the voucher (e.g.: get one and receive one free)"
            },
            "value": {
              "type": "array",
              "description": "Discount that the voucher applies when it's a discount voucher",
              "items": {
                "$ref": "#/definitions/QuantityType"
              }
            },
            "expirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "the voucher's expiration date"
            },
            "campaign": {
              "type": "string",
              "description": "Campaign this voucher belongs to"
            }
          },
          "title": "VoucherType",
          "description": "Details of a voucher"
        }
      ],
      "description": "Details of a voucher"
    }
  }
}